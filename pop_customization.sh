#!/bin/bash

resDir="res"
colorCodes="$resDir/colorCodes"
refDir='Pop_Theme_reference'
modDir='Pop_Theme_modified'
colorsJson="$resDir/colors.json"

# Functions related to color output in terminal if -c option was provided

hexToRGB () {
	hex=$1
	printf "%d %d %d\n" 0x${hex:0:2} 0x${hex:2:2} 0x${hex:4:2}
}

getClosestColor () {
	ir=$1
	ig=$2
	ib=$3
	colors=`cat $colorsJson`
    max=`echo $colors | jq '. | length'`
	minOffset=765 #3x255
	declare -A colorArray
	for (( i=0; i<$max; i++ ))
	do	
		color=`echo $colors | jq ".[$i]"`
		r=`echo $color | jq ".rgb.r"`
		g=`echo $color | jq ".rgb.g"`
		b=`echo $color | jq ".rgb.b"`
		offsetR=$((ir-r))
		offsetG=$((ig-g))
		offsetB=$((ib-b))

		if [ $offsetR -lt 0 ] ; then offsetR=$((0-offsetR)) ; fi
		if [ $offsetG -lt 0 ] ; then offsetG=$((0-offsetG)) ; fi
		if [ $offsetB -lt 0 ] ; then offsetB=$((0-offsetB)) ; fi

		offset=$((offsetR+offsetG+offsetB))

		if [ $offset -le $minOffset ]
		then
			if [ ${colorArray[$offset]+_} ] 
			then colorArray["$offset"]+=", $color"
			else colorArray["$offset"]=$color
			fi
			minOffset=$offset
		fi
	done
	echo ${colorArray["$minOffset"]} | jq '.'
}

colorCodeCached () {
	code="-1"
	while read l ; do
		line=($l)
		if [ $1 == ${line[0]} ] ; then code=${line[1]} ; fi
	done < $colorCodes
	echo $code
}

getColorCode () {
	hex=$1
	code=0
	if [[ ${#hex} -eq 7 ]]
	then
		hex="${hex:1}"
		if [[ $hex =~ ^[0-9A-Fa-f]{6}$ ]]
		then
			touch $colorCodes
			code=`colorCodeCached $hex`
			if [ $code == "-1" ] 
			then
				rgb=(`hexToRGB $hex`)
				r=${rgb[0]}
				g=${rgb[1]}
				b=${rgb[2]}
				color=`getClosestColor $r $g $b`
				code=`echo $color | jq ".colorId"`
				echo "$hex $code" >> $colorCodes
			fi
		fi
	fi
    echo $code
}

# end of color output related functions

# Script parameters handling

d=false
i=false
r=false
c=false
w=false
man='Usage: pop_customization [OPTIONS] \nGenerates a Pop OS based theme with a custom color scheme. \n	-d	Force download of reference theme from Pop OS git repo.\n	-i	Install theme after customization\n	-r	Reset installed theme to vanilla Pop OS theme.\n	-h	Display this help and exit.\n	-c	Use terminal colors for preview (compatible with most modern terminals)\n	-w	Wipe local resources previously generated by the script'

if [ $# -ne 0 ]
then
	for arg in "$@"
	do
		case $arg in
		"-d")
			d=true
			;;
		"-i")
			i=true
			;;
		"-r")
			echo "-r isn't yet implemented"
			r=true
			exit
			;;
		"-h")
			echo -e $man
			exit
			;;
		"-c")
			c=true
			;;
		"-w")
			w=true
			;;
		*)
			echo "Unknown argument $arg"
			exit
			;;
		esac
	done
fi

if $w
then
	rm -r $refDir
	rm -r $resDir
fi

if [ ! -d $resDir ] ; then mkdir $resDir ; fi

if ! $d
then
	if [ ! -d $refDir ]
	then 
		echo "Reference theme not locally available, do you want to download it ? [Y/n]"
		read input
		case $input in
		"y"|"yes"|""|"Yes"|"Y")
			d=true
			;;
		*)
			exit
			;;
		esac
	fi
fi

if $d 
then
	echo "Get official Pop OS theme from git repo." 
	rm -r $refDir
	git clone https://github.com/pop-os/gtk-theme.git $refDir
fi

if $c
then
	echo -e "\n\033[01;01mDisclaimer : \033[00m"
	echo -e "\033[01;01mMost terminals have only 256 colors\033[00m"
	echo -e "\033[01;01mYour screen has more (I hope for you)\033[00m"
	echo -e "\033[01;01mColors displayed here will only be an approximation\033[00m\n"
	echo -e "\033[01;01mParsing TermX color codes will take a while on the first run, but once cached it'll be faster on subsequent runs\033[00m\n"
	if ! [ -f $colorsJson ]
	then
		echo "Reference color codes not locally available, do you want to download them ? [Y/n]"
		read input
		case $input in
		"y"|"yes"|""|"Yes"|"Y")
			curl https://jonasjacek.github.io/colors/data.json | jq . > $colorsJson
			;;
		*)
			echo "Won't use colors"
			c=false
			;;
		esac
	fi
fi

# End of script parameter handling

count=0
while read l; do
	((count++))
	print=false
	dark=false
	case $l in
	*"- Orange:"*)
		color="Orange: "
		;;
	*"- Blue:"*)
		color="Blue: "
		;;
	*"- Window background:"*)
		color="Window Background: "
		;;
	*"- Header/Title Bars:"*)
		color="Header/Title Bars: "
		;;
	*"- Dark theme:"*)
		dark=true
		words=($l)
		#echo "color 1: ${words[3]}, color 2: ${words[5]}"
		;;
	*"- Light theme:"*)
		words=($l)
		#echo "color 1: ${words[3]}, color 2: ${words[5]}"
		;;
	esac
done < $refDir/TESTING.md

echo "Copy theme directory to $modDir where modifications will happen."
cp -r $refDir $modDir

formatHex () {
	li=${1#*#}
	echo "#${li:0:6}"
}

# Parsing colors from /gnome-shell/src/gnome-shell-sass/_colors.scss 

echo -e "\n\033[01;01mColors from _colors.scss\033[00m"
shellColors="/gnome-shell/src/gnome-shell-sass/_colors.scss"
baseColorsArray=("\$base_color" "\$bg_color" "\$fg_color")
declare -A baseColorsMap
for color in ${baseColorsArray[*]}
do
	baseColorsMap[$color,0]="#000000"
	baseColorsMap[$color,1]="#000000"
done

while read l; do
	words=($l)
	for color in ${baseColorsArray[*]}
	do
		if [[ $l == *"$color:"* ]]
		then
			baseColorsMap[$color,0]=`formatHex ${words[4]}`
			baseColorsMap[$color,1]=`formatHex ${words[5]}`
		fi
	done
done < $refDir$shellColors

formatColors () {
	if $c
	then
		codeLight=`getColorCode $2`
		codeDark=`getColorCode $3`
		echo "$1 \033[01;38;5;${codeLight}m$2\033[00m \033[01;38;5;${codeDark}m$3\033[00m"
	else
		echo "$1 $2 $3"
	fi
}

displayBaseColors () {
	size=${#baseColorsMap[@]}
	count=1
	echo -e 'Colors Light Dark'
	for color in ${baseColorsArray[*]}
	do
		echo -ne "Parsing color code $count of $size"\\r 1>&2
		echo -e `formatColors "$color" ${baseColorsMap[$color,0]} ${baseColorsMap[$color,1]}`
		(( count++ ))	
		(( count++ ))
	done
}

displayBaseColors | column -t

# End of color parsing from /gnome-shell/src/gnome-shell-sass/_colors.scss 

# Parsing colors from /gnome-shell/src/gnome-shell-sass/_pop_os_colors.scss 

echo -e "\n\033[01;01mColors from _pop_os_colors.scss\033[00m"

popOsColors="/gnome-shell/src/gnome-shell-sass/_pop_os_colors.scss"
popColorsArray=("orange" "blue" "green" "red" "yellow" "purple" "pink" "indigo")
variants=("\$" "\$highlights_" "\$text_")

declare -A popColorsMap
for color in ${popColorsArray[*]}
do
	for variant in ${variants[*]}
	do 
		popColorsMap[$color,$variant,0]="#000000"
		popColorsMap[$color,$variant,1]="#000000"
	done
done

extractColors () {
	words=($1)
	for color in ${popColorsArray[*]}
	do
		for variant in ${variants[*]}
		do
			if [[ $1 == *"$variant$color"* ]]
			then
				popColorsMap[$color,$variant,0]=`formatHex ${words[2]}`
				popColorsMap[$color,$variant,1]=`formatHex ${words[3]}`
			fi
		done
	done
}

displayPopColors () {	
	size=${#popColorsMap[@]}
	count=1
	echo 'Colors Light Dark'
	for color in ${popColorsArray[*]}
	do
		for variant in ${variants[*]}
		do
			echo -ne "Parsing color code $count of $size"\\r 1>&2
			echo -e `formatColors "$variant$color" ${popColorsMap[$color,$variant,0]} ${popColorsMap[$color,$variant,1]}`
			(( count++ ))
			(( count++ ))
		done
	done
}

while read l; do
	extractColors "$l" 
done < $refDir$popOsColors

displayPopColors | column -t

# End of color parsing from /gnome-shell/src/gnome-shell-sass/_pop_os_colors.scss 

